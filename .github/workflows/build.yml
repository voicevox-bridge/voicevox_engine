name: build
on:
  push:
    branches:
      - master
  release:
    types:
      - created
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/voicevox_engine
  PYTHON_VERSION: '3.8.10'
  VOICEVOX_ENGINE_VERSION: |- # releaseのときはタグが、それ以外はlatestがバージョン名に
    ${{ github.event.release.tag_name != '' && github.event.release.tag_name || 'latest' }}

jobs:
  # Build Linux binary (push only buildcache image)
  build-linux:
    strategy:
      matrix:
        os: [ubuntu-latest]
        tag:
          - build-cpu-ubuntu18.04
          - build-nvidia-ubuntu18.04
        include:
        - tag: build-cpu-ubuntu18.04
          runtime_tag: cpu-ubuntu18.04 # for cache use
          target: build-env
          base_image: ubuntu:bionic
          base_runtime_image: ubuntu:bionic
          artifact_name: linux-cpu
          nuitka_cache_path: nuitka_cache
        - tag: build-nvidia-ubuntu18.04
          runtime_tag: nvidia-ubuntu18.04 # for cache use
          target: build-env
          base_image: ubuntu:bionic
          base_runtime_image: nvidia/cuda:11.4.2-cudnn8-runtime-ubuntu18.04
          artifact_name: linux-nvidia
          nuitka_cache_path: nuitka_cache

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # NOTE: `load: true` may silently fail when the GitHub Actions disk (14GB) is full.
      # https://docs.github.com/ja/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
      - name: Create binary build environment with Docker
        uses: docker/build-push-action@v2
        env:
          IMAGE_TAG: ${{ env.IMAGE_NAME }}:${{ matrix.tag }}${{ (matrix.tag != '' && '-') || '' }}latest
          RUNTIME_IMAGE_TAG: ${{ env.IMAGE_NAME }}:${{ matrix.runtime_tag }}${{ (matrix.runtime_tag != '' && '-') || '' }}latest
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            BASE_RUNTIME_IMAGE=${{ matrix.base_runtime_image }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            VOICEVOX_ENGINE_VERSION=${{ env.VOICEVOX_ENGINE_VERSION }}
          target: ${{ matrix.target }}
          load: true
          tags: |
            ${{ env.IMAGE_TAG }}
          cache-from: |
            type=registry,ref=${{ env.IMAGE_TAG }}-buildcache
            type=registry,ref=${{ env.RUNTIME_IMAGE_TAG }}-buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_TAG }}-buildcache,mode=max

      # Build run.py with Nuitka in Docker
      - name: Cache Nuitka (ccache, module-cache)
        uses: actions/cache@v2
        id: nuitka-cache
        with:
          path: ${{ matrix.nuitka_cache_path }}
          key: ${{ runner.os }}-nuitka-${{ matrix.tag }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nuitka-${{ matrix.tag }}-

      - name: Build run.py with Nuitka in Docker
        env:
          IMAGE_TAG: ${{ env.IMAGE_NAME }}:${{ matrix.tag }}${{ (matrix.tag != '' && '-') || '' }}latest
        run: |
          docker run --rm \
            -v "$(readlink -f "${{ matrix.nuitka_cache_path }}"):/home/user/.cache/Nuitka" \
            -v "$(readlink -f "build"):/opt/voicevox_engine_build" \
            "${{ env.IMAGE_TAG }}"

      # FIXME: versioned name may be useful; but
      # actions/download-artifact and dawidd6/download-artifact do not support
      # wildcard / forward-matching yet.
      # Currently, It is good to use static artifact name for future binary test workflow.
      # https://github.com/actions/toolkit/blob/ea81280a4d48fb0308d40f8f12ae00d117f8acb9/packages/artifact/src/internal/artifact-client.ts#L147
      # https://github.com/dawidd6/action-download-artifact/blob/af92a8455a59214b7b932932f2662fdefbd78126/main.js#L113
      - uses: actions/upload-artifact@v2
        # env:
        #   VERSIONED_ARTIFACT_NAME: |
        #     ${{ format('{0}-{1}', matrix.artifact_name, (github.event.release.tag_name != '' && github.event.release.tag_name) || github.sha) }}
        with:
          name: ${{ matrix.artifact_name }}
          path: build/run.dist/

  build-windows:
    strategy:
      matrix:
        include:
        # Windows CPU
        - os: windows-2019
          python_architecture: 'x64'
          ccache_url: https://github.com/ccache/ccache/releases/download/v4.4.1/ccache-4.4.1-windows-64.zip
          artifact_name: windows-cpu
          nuitka_cache_path: nuitka_cache
          pip_cache_path: ~\AppData\Local\pip\Cache
        # Windows NVIDIA GPU
        #- os: windows-2019
        #  python_architecture: 'x64'
        #  ccache_url: https://github.com/ccache/ccache/releases/download/v4.4.1/ccache-4.4.1-windows-64.zip
        #  artifact_name: windows-nvidia
        #  nuitka_cache_path: nuitka_cache
        #  pip_cache_path: ~\AppData\Local\pip\Cache

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      # Python install path: C:/hostedtoolcache/windows/Python
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.python_architecture }}

      # Install Python dependencies
      - name: Prepare Python dependencies cache
        uses: actions/cache@v2
        id: pip-cache
        with:
          path: ${{ matrix.pip_cache_path }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        shell: bash
        run: |
          # FIXME: Nuitka cannot build with setuptools>=60.7.0
          # https://github.com/Nuitka/Nuitka/issues/1406
          python -m pip install --upgrade pip setuptools==60.6.0 wheel
          python -m pip install -r requirements-dev.txt

          # Download pyopenjtalk dictionary
          # try 5 times, sleep 5 seconds before retry
          for i in $(seq 5); do
            EXIT_CODE=0
            python3 -c "import pyopenjtalk; pyopenjtalk._lazy_init()" || EXIT_CODE=$?

            if [ "$EXIT_CODE" = "0" ]; then
              break
            fi

            sleep 5
          done

          if [ "$EXIT_CODE" != "0" ]; then
            exit "$EXIT_CODE"
          fi

      - name: Create download directory
        shell: bash
        run: mkdir -p download/

      # Install Ccache
      - name: Export Ccache url to calc hash
        shell: bash
        run: echo "${{ matrix.ccache_url }}" > download/ccache_url.txt

      - name: Prepare Ccache
        uses: actions/cache@v2
        id: ccache-cache
        with:
          key: ${{ matrix.os }}-ccache-${{ hashFiles('download/ccache_url.txt') }}
          path: download/ccache

      - name: Download Ccache
        if: steps.ccache-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L "${{ matrix.ccache_url }}" > download/ccache.zip
          unzip download/ccache.zip -d download/
          rm download/ccache.zip
          mv download/ccache-*/ download/ccache

      - name: Install Ccache
        shell: bash
        run: |
          echo "$HOME/download/ccache" >> $GITHUB_PATH

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      - name: Install cuda-toolkit
        uses: Jimver/cuda-toolkit@v0.2.5
        if: matrix.artifact_name == 'windows-nvidia'
        id: cuda-toolkit
        with:
          cuda: '11.3.1'
      
      - name: install pytorch with cuda
        if: matrix.artifact_name == 'windows-nvidia'
        shell: bash
        run: python -m pip install torch==1.10.2+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html

      - name: Generate licenses.json
        shell: bash
        run: python generate_licenses.py > licenses.json

      - name: Cache Nuitka (ccache, module-cache)
        uses: actions/cache@v2
        id: nuitka-cache
        with:
          path: ${{ matrix.nuitka_cache_path }}
          key: ${{ runner.os }}-nuitka-${{ matrix.artifact_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nuitka-${{ matrix.artifact_name }}-

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      - name: Build run.py with Nuitka
        shell: bash
        env:
          NUITKA_CACHE_DIR: ${{ matrix.nuitka_cache_path }}
        run: |
          set -eux

          # Replace version
          sed -i "s/__version__ = \"latest\"/__version__ = \"${{ env.VOICEVOX_ENGINE_VERSION }}\"/" voicevox_engine/__init__.py

          python -m nuitka \
            --standalone \
            --assume-yes-for-downloads \
            --plugin-enable=numpy \
            --plugin-enable=torch \
            --user-plugin=FixBuildPlugin.py \
            --enable-plugin=anti-bloat \
            --follow-import-to=numpy \
            --follow-import-to=aiofiles \
            --include-package=uvicorn \
            --include-package=anyio \
            --include-package-data=pyopenjtalk \
            --include-package-data=scipy \
            --nofollow-import-to=sklearn \
            --include-data-file="licenses.json=./" \
            --include-data-file="user.dic=./" \
            --include-data-file="presets.yaml=./" \
            --include-data-dir="speaker_info=./speaker_info" \
            --msvc=14.2 \
            --follow-imports \
            --nofollow-import-to=torchvision \
            --nofollow-import-to=torchaudio \
            --nofollow-import-to=distance \
            --nofollow-import-to=unidecode \
            --follow-imports \
            --no-prefer-source-code \
            run.py

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      - name: Create artifact directory with symlink
        shell: bash
        env:
          PYTHON_SITE_PACKAGES_DIR: C:/hostedtoolcache/windows/python/${{ steps.setup-python.outputs.python-version }}/x64/lib/site-packages
          # create symlink instead of copy (Git Bash)
          # https://qiita.com/ucho/items/c5ea0beb8acf2f1e4772
          MSYS: winsymlinks:nativestrict
        run: |
          set -eux

          # Build artifact directory
          mkdir -p artifact
          ln -sf "$(pwd)/run.dist"/* artifact/

          # pysoundfile
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/_soundfile_data" artifact/
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/llvmlite/binding/llvmlite.dll" artifact/

          # espnet
          mkdir artifact/espnet
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/espnet/version.txt" artifact/espnet/

          # librosa
          mkdir -p artifact/librosa/util
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/librosa/util/example_data" artifact/librosa/util/

          # resampy
          mkdir artifact/resampy
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/resampy/data" artifact/resampy/

          # jamo
          mkdir artifact/jamo
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/jamo/data" artifact/jamo/

      # FIXME: versioned name may be useful; but
      # actions/download-artifact and dawidd6/download-artifact do not support
      # wildcard / forward-matching yet.
      # Currently, It is good to use static artifact name for future binary test workflow.
      # https://github.com/actions/toolkit/blob/ea81280a4d48fb0308d40f8f12ae00d117f8acb9/packages/artifact/src/internal/artifact-client.ts#L147
      # https://github.com/dawidd6/action-download-artifact/blob/af92a8455a59214b7b932932f2662fdefbd78126/main.js#L113
      - uses: actions/upload-artifact@v2
        # env:
        #   VERSIONED_ARTIFACT_NAME: |
        #     ${{ format('{0}-{1}', matrix.artifact_name, (github.event.release.tag_name != '' && github.event.release.tag_name) || github.sha) }}
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            artifact/

  upload-to-release:
    if: github.event.release.tag_name != ''
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact_name:
          - linux-cpu
          - linux-nvidia
          - windows-cpu
          #- windows-nvidia
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              p7zip-full

      - name: Download and extract artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}/

      - name: Rearchive and split artifact
        run: |
          # compressed to artifact.7z.001, artifact.7z.002, ...
          7z -r -v1g a "${{ matrix.artifact_name }}.7z" "${{ matrix.artifact_name }}/"

          # Output splitted archive list
          ls ${{ matrix.artifact_name }}.7z.* > archives.txt
          mv archives.txt "${{ matrix.artifact_name }}.7z.txt"

      - name: Upload splitted archives to Release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }} # == github.event.release.tag_name
          file_glob: true
          file: ${{ matrix.artifact_name }}.7z.*
