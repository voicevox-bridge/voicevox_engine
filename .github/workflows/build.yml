name: build
on:
  push:
    branches:
      - master
  release:
    types:
      - created
  workflow_dispatch:
    inputs:
      version:
        description: "バージョン情報（A.BB.C / A.BB.C-preview.D）"
        required: true
      prerelease:
        description: "プレリリースかどうか"
        type: boolean
        default: true
      code_signing:
        description: "コード署名する"
        type: boolean

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/voicevox_engine
  PYTHON_VERSION: "3.8.10"
  VOICEVOX_RESOURCE_VERSION: "0.13.0"
  VOICEVOX_CORE_VERSION: "0.13.0"
  VOICEVOX_ENGINE_VERSION:
    |- # releaseタグ名か、workflow_dispatchでのバージョン名か、latestが入る
    ${{ github.event.release.tag_name || github.event.inputs.version || 'latest' }}

jobs:
  build-windows:
    environment: ${{ github.event.inputs.code_signing == 'true' && 'code_signing' || '' }} # コード署名用のenvironment
    strategy:
      matrix:
        include:
          # Windows CPU
          - os: windows-2019
            architecture: "x64"
            voicevox_core_asset_prefix: voicevox_core-windows-x64-cpu
            onnxruntime_url: https://github.com/microsoft/onnxruntime/releases/download/v1.10.0/onnxruntime-win-x64-1.10.0.zip
            ccache_url: https://github.com/ccache/ccache/releases/download/v4.4.1/ccache-4.4.1-windows-64.zip
            artifact_name: windows-cpu
            nuitka_cache_path: nuitka_cache

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h


      - name: Show disk space (debug info)
        if: matrix.cudnn_url != ''
        shell: bash
        run: |
          df -h

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      # Python install path: C:/hostedtoolcache/windows/Python
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.architecture }}
          cache: pip

      - name: Install Python dependencies
        shell: bash
        run: |
          # FIXME: Nuitka cannot build with setuptools>=60.7.0
          # https://github.com/Nuitka/Nuitka/issues/1406
          python -m pip install --upgrade pip setuptools==60.6.0 wheel
          python -m pip install -r requirements-dev.txt

          # Download pyopenjtalk dictionary
          # try 5 times, sleep 5 seconds before retry
          for i in $(seq 5); do
            EXIT_CODE=0
            python3 -c "import pyopenjtalk; pyopenjtalk._lazy_init()" || EXIT_CODE=$?

            if [ "$EXIT_CODE" = "0" ]; then
              break
            fi

            sleep 5
          done

          if [ "$EXIT_CODE" != "0" ]; then
            exit "$EXIT_CODE"
          fi

      - name: Create download directory
        shell: bash
        run: mkdir -p download/

      # Install Ccache
      - name: Export Ccache url to calc hash
        shell: bash
        run: echo "${{ matrix.ccache_url }}" > download/ccache_url.txt

      - name: Prepare Ccache
        uses: actions/cache@v2
        id: ccache-cache
        with:
          key: ${{ matrix.os }}-ccache-${{ hashFiles('download/ccache_url.txt') }}
          path: download/ccache

      - name: Download Ccache
        if: steps.ccache-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L "${{ matrix.ccache_url }}" > download/ccache.zip
          unzip download/ccache.zip -d download/
          rm download/ccache.zip
          mv download/ccache-*/ download/ccache

      - name: Install Ccache
        shell: bash
        run: |
          echo "$HOME/download/ccache" >> $GITHUB_PATH

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      - name: Generate licenses.json
        shell: bash
        run: |
          python generate_licenses.py > engine_manifest_assets/dependency_licenses.json
          # FIXME: VOICEVOX (editor) cannot build without licenses.json
          cp engine_manifest_assets/dependency_licenses.json licenses.json

      - name: Cache Nuitka (ccache, module-cache)
        uses: actions/cache@v2
        id: nuitka-cache
        with:
          path: ${{ matrix.nuitka_cache_path }}
          key: ${{ runner.os }}-nuitka-${{ matrix.artifact_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nuitka-${{ matrix.artifact_name }}-

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      - name: Build run.py with Nuitka
        shell: bash
        env:
          NUITKA_CACHE_DIR: ${{ matrix.nuitka_cache_path }}
        run: |
          set -eux

          # Replace version
          sed -i "s/__version__ = \"latest\"/__version__ = \"${{ env.VOICEVOX_ENGINE_VERSION }}\"/" voicevox_engine/__init__.py

          python -m nuitka \
            --standalone \
            --assume-yes-for-downloads \
            --plugin-enable=numpy \
            --plugin-enable=torch \
            --user-plugin=FixBuildPlugin.py \
            --enable-plugin=anti-bloat \
            --follow-import-to=numpy \
            --follow-import-to=aiofiles \
            --include-package=uvicorn \
            --include-package=anyio \
            --include-package-data=pyopenjtalk \
            --include-package-data=scipy \
            --include-data-file="licenses.json=./" \
            --include-data-file="presets.yaml=./" \
            --include-data-file="default.csv=./" \
            --nofollow-import-to=sklearn \
            --include-data-file="engine_manifest.json=./" \
            --include-data-dir="speaker_info=./speaker_info" \
            --msvc=14.2 \
            --nofollow-import-to=torchvision \
            --nofollow-import-to=torchaudio \
            --nofollow-import-to=distance \
            --nofollow-import-to=unidecode \
            --follow-imports \
            --no-prefer-source-code \
            run.py

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      - name: Create artifact directory with symlink
        shell: bash
        env:
          PYTHON_SITE_PACKAGES_DIR: C:/hostedtoolcache/windows/python/${{ steps.setup-python.outputs.python-version }}/x64/lib/site-packages
          # create symlink instead of copy (Git Bash)
          # https://qiita.com/ucho/items/c5ea0beb8acf2f1e4772
          MSYS: winsymlinks:nativestrict
        run: |
          set -eux

          # Build artifact directory
          mkdir -p artifact
          ln -sf "$(pwd)/run.dist"/* artifact/

          # Copy DLL dependencies

          # pysoundfile
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/_soundfile_data" artifact/
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/llvmlite/binding/llvmlite.dll" artifact/

          # espnet
          mkdir artifact/espnet
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/espnet/version.txt" artifact/espnet/

          # librosa
          mkdir -p artifact/librosa/util
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/librosa/util/example_data" artifact/librosa/util/

          # resampy
          mkdir artifact/resampy
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/resampy/data" artifact/resampy/

          # jamo
          mkdir artifact/jamo
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/jamo/data" artifact/jamo/

      - name: Code signing
        if: github.event.inputs.code_signing == 'true'
        shell: bash
        run: |
          bash build_util/codesign.bash "artifact/run.exe"
        env:
          CERT_BASE64: ${{ secrets.CERT_BASE64 }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}

      # FIXME: versioned name may be useful; but
      # actions/download-artifact and dawidd6/download-artifact do not support
      # wildcard / forward-matching yet.
      # Currently, It is good to use static artifact name for future binary test workflow.
      # https://github.com/actions/toolkit/blob/ea81280a4d48fb0308d40f8f12ae00d117f8acb9/packages/artifact/src/internal/artifact-client.ts#L147
      # https://github.com/dawidd6/action-download-artifact/blob/af92a8455a59214b7b932932f2662fdefbd78126/main.js#L113
      - uses: actions/upload-artifact@v2
        # env:
        #   VERSIONED_ARTIFACT_NAME: |
        #     ${{ format('{0}-{1}', matrix.artifact_name, (env.VOICEVOX_ENGINE_VERSION != 'latest' && env.VOICEVOX_ENGINE_VERSION) || github.sha) }}
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            artifact/

  upload-to-release:
    if: (github.event.release.tag_name || github.event.inputs.version) != ''
    needs: [build-windows]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact_name:
          - windows-cpu
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              p7zip-full

      - name: Download and extract artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}/

      - name: Rearchive and split artifact
        run: |
          # compressed to artifact.7z.001, artifact.7z.002, ...
          7z -r -v1g a "${{ matrix.artifact_name }}.7z" "${{ matrix.artifact_name }}/"

          # Output splitted archive list
          ls ${{ matrix.artifact_name }}.7z.* > archives.txt
          mv archives.txt "${{ matrix.artifact_name }}.7z.txt"

      - name: Upload splitted archives to Release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.VOICEVOX_ENGINE_VERSION }}
          prerelease: ${{ github.event.inputs.prerelease }}
          file_glob: true
          file: ${{ matrix.artifact_name }}.7z.*

  run-release-test-workflow:
    if: (github.event.release.tag_name || github.event.inputs.version) != ''
    needs: [upload-to-release]
    uses: ./.github/workflows/release-test.yml
    with:
      version: ${{ github.event.release.tag_name || github.event.inputs.version }} # env.VOICEVOX_ENGINE_VERSIONが使えない
      repo_url: ${{ format('{0}/{1}', github.server_url, github.repository) }} # このリポジトリのURL
